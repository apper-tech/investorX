# Ropsten test-net:

ElectionBase
(This smart contract is not used at all. It was deployed to the test-net just to be tested. Since, it is the base contract of the next 2 others):
	Deployed Address: 0x4ce4c7d0156c620666b044a4007088ce4d70849b
	Verified code: https://ropsten.etherscan.io/address/0x4ce4c7d0156c620666b044a4007088ce4d70849b#code

Election:
	Deployed Address: 0xA4f34a70d191EDC9F9Cb4BD8b3A4E6e460BaF937
	Verified code: https://ropsten.etherscan.io/address/0xa4f34a70d191edc9f9cb4bd8b3a4e6e460baf937#code

ElectionFactory:
	Deployed Address: 0xb3f80f249dDf5007a537d1A4A5914642789e3D95
	Verified code: https://ropsten.etherscan.io/address/0xb3f80f249ddf5007a537d1a4a5914642789e3d95#code
	
	

# Note
The contracts' codes are verified at ropsten.etherscan.io
To achieve that the smart contracts files has to be flattened before they are submitted to etherscan. Truffle Flattener was used (https://www.npmjs.com/package/truffle-flattener). However, to flatten after code changes you can run the following commands (after having the flattener installed with `npm install -g truffle-flattener`):
	truffle-flattener ./contracts/ElectionBase.sol > ./flattened-contracts/ElectionBaseFlattened.sol
	truffle-flattener ./contracts/Election.sol > ./flattened-contracts/ElectionFlattened.sol
	truffle-flattener ./contracts/ElectionFactory.sol > ./flattened-contracts/ElectionFactoryFlattened.sol
